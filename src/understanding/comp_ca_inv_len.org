#+TITLE: length_comparison
#+STARTUP: showeverything
#+AUTHOR: Nikos Papadakis, Nikolas Torosian

Here the idea is to compare the lengths of the datasets cause i think there are
more samples in the CA dataset than in the INV dataset recorded in June
* Imports
#+begin_src jupyter-python :session py :async yes :results raw drawer

from pathlib import Path
from matplotlib import pyplot as plt
import scipy.signal as signal
import numpy as np
import pandas as pd

from nptdms import TdmsFile
import nptdms


import pros_noisefiltering as pnf
from pros_noisefiltering.gen_functions import (spect,plot_spect_comb2,
                                               Fft_Plot_info,Axis_titles,plot_FFT,Signals_for_fft_plot,
                                               fft_calc_sig,fft_sig)

from pros_noisefiltering.WT_NoiProc import WT_NoiseChannelProc
from pros_noisefiltering.Graph_data_container import Graph_data_container

from numpy.fft import fft, ifft


#+end_src

#+RESULTS:
:results:
:end:

* Info of file
This file is for comparing the spectrum of a filtered time series

 The first 3 plots are a comparison between the signals with the compressed air.
  - Here the signals are compared with respect of the Inverter state
       - **on/off**
* Extra functions
#+begin_src jupyter-python :session py :async yes :results raw drawer
def apply_filter(sig_r:np.ndarray, fs_hz:float, fc_hz = 100, filt_order = 2 ):
                 # filter cutoff frequency
    sos = signal.butter(filt_order , fc_hz, 'lp', fs=fs_hz, output='sos')
    filtered = signal.sosfilt(sos, sig_r-sig_r[0])+sig_r[0]
    return filtered


#+end_src

#+RESULTS:
:results:
:end:

* CONSTANTS
 I use the current working directory of the file to store the folder with the data for ease (FIR_LP_filter/).
#+begin_src jupyter-python :session py :async yes :results raw drawer


FOLDER_FOR_DATA = Path('/home/dtos_experiment/Documents/data_folder/measurements_12_05_22/new_record_prop_channel/')
if not FOLDER_FOR_DATA.exists():
    FOLDER_FOR_DATA = Path('D:/_data/WEL/WEL20220512/')

#%% CONSTANTS
FIGSIZE_STD = (6,6)
#Constant directories and names for the .tdms file structure
# Dir name
TDMS_FNAME = 'Data.tdms'
GROUP_NAME = 'Wind Measurement'
CHAN_NAME = 'Wind2'
#+end_src

#+RESULTS:
:results:
:end:
* Comp. air
Dir names for the Compressed air measurement
=================================================
Here the Compressed air measurements are imported
=================================================

#+begin_src jupyter-python :session py :async yes :results raw drawer

comp_air_dir = 'compressed air'

#%% preparing tdms files
# New renamed folders for rec version information
data_CA_inv_0_WS_0 = 'ca0_0.1'
data_CA_inv_0_WS_5 = 'ca0_5.1'
data_CA_inv_0_WS_11= 'ca0_10.1'
data_CA_inv_1_WS_0 = 'ca1_0.1'
data_CA_inv_1_WS_5 = 'ca1_5.1'
data_CA_inv_1_WS_10= 'ca1_10.1'

path_comp = FOLDER_FOR_DATA / comp_air_dir

# CA stands for compressed air

raw_signal_CA = [data_CA_inv_0_WS_0, data_CA_inv_0_WS_5,
                data_CA_inv_0_WS_11, data_CA_inv_1_WS_0,
                data_CA_inv_1_WS_5, data_CA_inv_1_WS_10 ]

l_tdms_CA = []

for item in raw_signal_CA:
    x=TdmsFile( Path( f'{path_comp}/{item}' , TDMS_FNAME))
    l_tdms_CA.append(x)

#%%
# [print(x) for x in l_tdms_CA[0][GROUP_NAME].channels()]

#+end_src

#+RESULTS:
:results:
:end:

* Compressed air measurements :df_tdms_x_x_objects:
#+begin_src jupyter-python :session py :async yes :results raw drawer


GROUP_NAME = 'Wind Measurement'
CHAN_NAME = 'Wind2'


df_tdms_0_0 = WT_NoiseChannelProc.from_tdms(l_tdms_CA[0][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter off, WS=0')
df_tdms_0_5 = WT_NoiseChannelProc.from_tdms(l_tdms_CA[1][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter off, WS=5')
df_tdms_0_10 = WT_NoiseChannelProc.from_tdms(l_tdms_CA[2][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter off, WS=11')
df_tdms_1_0 = WT_NoiseChannelProc.from_tdms(l_tdms_CA[3][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter on, WS=0')
df_tdms_1_5 = WT_NoiseChannelProc.from_tdms(l_tdms_CA[4][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter on, WS=5')
df_tdms_1_10 = WT_NoiseChannelProc.from_tdms(l_tdms_CA[5][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter on, WS=10')
#+end_src

#+RESULTS:
:results:
:end:

* Wind tunnel measurements :dfi_ix_wx_objects:
#+begin_src jupyter-python :session py :async yes :results raw drawer


inv_meas_dir = 'inverter'
# Inverter measurements of interest
data_inv_inv_0_WS_0= 'in0_0.1'
data_inv_inv_1_WS_0 = 'in1_0.1'
data_inv_inv_1_WS_5 = 'in1_5.1'
data_inv_inv_1_WS10= 'in1_10.1'
data_inv_inv_1_WS15 = 'in1_15.1'
data_inv_inv_1_WS_20 = 'in1_20.1'


path_comp = FOLDER_FOR_DATA / inv_meas_dir

# suffixes:
# - CA : compressed air
# - Inv : Inverter
# - DEC : decimation

raw_signal_CA = [data_inv_inv_0_WS_0, data_inv_inv_1_WS_0,
                 data_inv_inv_1_WS_5,
                data_inv_inv_1_WS10, data_inv_inv_1_WS15,
                data_inv_inv_1_WS_20 ]

l_tdms_Inv = []

for item in raw_signal_CA:
    x=TdmsFile( Path( f'{path_comp}/{item}' , TDMS_FNAME))
    l_tdms_Inv.append(x)

#%%
# [print(x) for x in l_tdms_Inv[0][GROUP_NAME].channels()]
# %%
dfi_i0_w0 = WT_NoiseChannelProc.from_tdms(l_tdms_Inv[0][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter Off, WS=0, 100kHz')
dfi_i1_w0 = WT_NoiseChannelProc.from_tdms(l_tdms_Inv[1][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter On, WS=0, 100kHz')
dfi_i1_w5 = WT_NoiseChannelProc.from_tdms(l_tdms_Inv[2][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter On, WS=5, 100kHz')
dfi_i1_w10 = WT_NoiseChannelProc.from_tdms(l_tdms_Inv[3][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter On, WS=10, 100kHz')
dfi_i1_w15 = WT_NoiseChannelProc.from_tdms(l_tdms_Inv[4][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter On, WS=15, 100kHz')
dfi_i1_w20 = WT_NoiseChannelProc.from_tdms(l_tdms_Inv[5][GROUP_NAME][CHAN_NAME]
                , desc= 'Inverter On, WS=20, 100kHz')


print (f'For each sample in inverter dataset there are \n {len(df_tdms_1_0.data_as_Series)/len(dfi_i1_w0.data_as_Series)} \n samples in CA dataset')

print (f'This should be close :\n length of CA :\n {len(df_tdms_1_0.data_as_Series)} \n and :\n length of inverter:\n{len(dfi_i1_w0.data_as_Series)}')
#+end_src

#+RESULTS:
:results:
: For each sample in inverter dataset there are
:  5.7407407407407405
:  samples in CA dataset
: This should be close :
:  length of CA :
:  3100000
:  and :
:  length of inverter:
: 540000
:end:

* Signal in frequency domain :standalone_spectrum_analyser:
+ Here a new algorithm is used with less clutter and from a more trusted source.
reference : [[https://www.youtube.com/watch?v=s2K1JfNR7Sc][Denoising Data with FFT [Python] - YouTube]]

#+begin_src jupyter-python :session py :async yes :results raw drawer
class FFT_new:
    def __init__(self, signal, title):
        self.Title = title
        self.sr = signal.fs_hz
        self.sig = signal.data
        self.ind = np.array(range(0,len(signal.data_as_Series),1))
        self.dt = 1/ int(self.sr)
        self.time_sec = self.ind * self.dt


    def fft_calc_and_plot(self, **kwargs):
        n= len(self.time_sec)
        fhat = fft(self.sig,n)                 # compute fft
        PSD = fhat * np.conj(fhat) / n               # Power spectrum (power/freq)
        freq = (1/(self.dt*n)) * np.arange(n)             # create x-axis (frequencies)
        L = np.arange(1,np.floor(n/2),dtype=int)     # plot only first half (possitive)

        fig, axs = plt.subplots(2,1,figsize=kwargs.get('figsize',None))

        plt.sca(axs[0])
        plt.grid(True,which='both')
        plt.title(self.Title)
        plt.xlabel('Time [s]')
        plt.ylabel('Amplitute (Voltage)')
        plt.plot(self.time_sec ,self.sig)
        #plt.loglog(freq[L],(PSD[L]))

        plt.sca(axs[1])
        plt.loglog(freq[L],abs(PSD[L]))
        plt.title('Frequency domain')
        plt.xlabel('Frequencies [Hz]')
        plt.ylabel('Power/Freq')
        plt.grid(True,which='both')

FFT_new(df_tdms_1_0.decimate(dec=5,offset=0),title='Decimation number 5 CA INV ON').fft_calc_and_plot(figsize=(12,9))
len(df_tdms_1_0.decimate(dec=5,offset=0).data)

FFT_new(dfi_i1_w0,title='Decimation number 1 INV INV ON').fft_calc_and_plot(figsize=(12,9))
len(dfi_i1_w0.data)

FFT_new(df_tdms_1_0,title='Decimation None CA INV ON').fft_calc_and_plot(figsize=(12,9))
len(df_tdms_1_0.data)
#This addition is for the inferior python shell for plotting the graphs using gtk app

plt.show()

x = FFT_new(df_tdms_1_5, title="None")
print(x.time_sec)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/5f2d52678bbb7e8bf0022efd4c2a3b839a246b2d.png]]
[[file:./.ob-jupyter/b370b4494267e881c41aa9a486b729c43fa0bc98.png]]
[[file:./.ob-jupyter/15ef1b40bd0b5184c0f8119c37435d8797f71d91.png]]
: [0.000000e+00 2.000000e-06 4.000000e-06 ... 6.999994e+00 6.999996e+00
:  6.999998e+00]
:end:

#+begin_src jupyter-python :session py :async yes :results raw drawer
a = np.array(range(0,len(df_tdms_0_0.data_as_Series),1))
print (a)
print(dfi_i1_w0.average(fr_Hz=200).calc_spectrum_gen(dec=1, nperseg=100*1024))
#+end_src

#+RESULTS:
:results:
: [      0       1       2 ... 2649997 2649998 2649999]
: <pros_noisefiltering.Graph_data_container.Graph_data_container object at 0x7f355bb2ead0>
: /usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 102400 is greater than input length  = 1080, using nperseg = 1080
:   warnings.warn('nperseg = {0:d} is greater than input length '
:end:


** TODO add last fuction doc.
[[file:~/Documents/dissertation/diss.tn.filtering-wind.py/src/understanding/comp_ca_inv_len.py::class FftNew:]]
* step4 filter inspection :new_filter_method:
** Papadakis paper Plots has a more elegant solution for freq domain
*** imports needed for butterworth construction :filt_butter_factory:
#+begin_src jupyter-python :session py  :async yes :results raw drawer


from pros_noisefiltering.WT_NoiProc import(
        filt_butter_factory,
        plot_comparative_response)

filter_Butter_200=filt_butter_factory(filt_order = 2, fc_hz = 100)

#+end_src

#+RESULTS:
:results:
:end:

*** plots
*** Decimation comparison plotting inverter off WS 5 :plot_spect_comb2:
#+begin_src jupyter-python :session py  :async yes :results raw drawer
#%%
#HACK consider renaming df_tdms_0_0 to df_tdms_i0_w0
# where i: inverter state
# where w: wind speed

#%%
# Estimate the power spectral density of the raw signal
# Hotwire speed 0 m/s
NPERSEG=1024<<8
fc_hz=200
fr_HZ = 100
#%%
plot_spect_comb2([df_tdms_0_5.calc_spectrum(nperseg=NPERSEG),
                df_tdms_0_5.decimate(10).calc_spectrum(nperseg=NPERSEG/10),
                df_tdms_0_5.decimate(100).calc_spectrum(nperseg=NPERSEG/100)],
                title='Comparison of spectra for signals at WS=5 for inverter Off \n decimated ',
                xlim =[1e1,3e5], ylim= [1e-7,1e-1],
                markersize=20,
                Kolmogorov_offset=1e0,
                figsize = (15,10),
                fname=None)

#%%
plot_spect_comb2([df_tdms_0_5.decimate(10).calc_spectrum(nperseg=NPERSEG*100, scaling='density'),
                df_tdms_0_5.decimate(10).calc_spectrum(nperseg=NPERSEG*10, scaling='density'),
                df_tdms_0_5.decimate(10).calc_spectrum(nperseg=NPERSEG*1, scaling='density')],
                title='Comparison of spectra for signals at WS=5 for inverter Off \n decimated ',
                xlim =[1e1,3e5], ylim= [1e-7,1e-1],
                markersize=5,
                Kolmogorov_offset=1e0,
                figsize = (15,10),
                fname=None)



#%%
plot_spect_comb2([df_tdms_0_5.average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_0_5.decimate(10).average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_0_5.decimate(100).average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4)
                ],
                title='Comparison of spectra for signals at WS=5 for inverter Off \n decimated  and averaged',
                xlim =[1e1,1e2], ylim= [1e-4,1e-1],
                markersize=20,
                Kolmogorov_offset=1e0,
                fname=None)

#%%
plot_spect_comb2([df_tdms_0_5.filter(fc_hz=fc_hz).average(fr_Hz=fr_HZ).set_desc('fr: 100Hz').calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_0_5.decimate(2).filter(fc_hz=fc_hz, desc = 'dec=2, fc:100').average(fr_Hz=fr_HZ).set_desc('dec=2, fr: 100Hz').calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_0_5.decimate(20).filter(fc_hz=fc_hz,desc = 'dec=20, fc:100').average(fr_Hz=fr_HZ).set_desc('dec=20, fr: 100Hz').calc_spectrum(nperseg=NPERSEG/4)],
                title='Comparison of spectra for signals at WS=5 for inverter Off \n decimated, filtered and finally averaged ',
                xlim =[1e0,3e2], ylim= [1e-5,1e-0],
                markersize=20,
                Kolmogorov_offset=1e0,
                fname=None)

#+end_src

#+RESULTS:
:results:
#+begin_example
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 26214400 is greater than input length  = 365000, using nperseg = 365000
  warnings.warn('nperseg = {0:d} is greater than input length '
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 2621440 is greater than input length  = 365000, using nperseg = 365000
  warnings.warn('nperseg = {0:d} is greater than input length '
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 65536 is greater than input length  = 730, using nperseg = 730
  warnings.warn('nperseg = {0:d} is greater than input length '
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 65536 is greater than input length  = 73, using nperseg = 73
  warnings.warn('nperseg = {0:d} is greater than input length '
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 65536 is greater than input length  = 8, using nperseg = 8
  warnings.warn('nperseg = {0:d} is greater than input length '
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 65536 is greater than input length  = 730, using nperseg = 730
  warnings.warn('nperseg = {0:d} is greater than input length '
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 65536 is greater than input length  = 365, using nperseg = 365
  warnings.warn('nperseg = {0:d} is greater than input length '
/usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 65536 is greater than input length  = 37, using nperseg = 37
  warnings.warn('nperseg = {0:d} is greater than input length '
#+end_example
[[file:./.ob-jupyter/08fc982022be88664dce1c3d977e3e09c7b177c0.png]]
[[file:./.ob-jupyter/829707366818fcb4fa143ed48d34ad934f9e8728.png]]
[[file:./.ob-jupyter/5b1eec2546cfbd72f777f2054dd76bdfe0cd8709.png]]
[[file:./.ob-jupyter/7eca3eeba7b9d7ae6661951089d6186ea0a814cd.png]]
:end:

*** plotting inverter ON and WS 5 :plot_spect_comb2:
:PROPERTIES:
:on:       <2023-02-15 Τετ 17:51>
:END:
#+begin_src jupyter-python :session py  :async yes :results raw drawer
# %% [markdown]
# plotting Inverter on measurements at WS 5 m/s
#
# %%  ===========================================================

NPERSEG=1024
plot_spect_comb2([df_tdms_1_5.calc_spectrum(nperseg=NPERSEG*100),
                df_tdms_1_5.decimate(10).calc_spectrum(nperseg=NPERSEG*10),
                df_tdms_1_5.decimate(100).calc_spectrum(nperseg=NPERSEG)],
                title='Comparison of spectra for signals at WS=5 for inverter On \n decimated ',
                xlim =[1e1,3e5], ylim= [1e-5,1e-1],
                Kolmogorov_offset=1e0, to_disk=True)
# %%

plot_spect_comb2([df_tdms_1_5.average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_1_5.decimate(2).average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_1_5.decimate(20).average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4)],
                title='Comparison of spectra for signals at WS=5 for inverter On \n decimated  and averaged',
                xlim =[1e0,3e2], ylim= [1e-4,1e-1],
                markersize=20,
                Kolmogorov_offset=1e0,
                fname=None)
#%%
fc_hz = 10
plot_spect_comb2([df_tdms_1_5.filter(fc_hz=fc_hz).average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_1_5.decimate(2).filter(fc_hz=fc_hz, desc = 'dec.f:2, fc:100').average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4),
                df_tdms_1_5.decimate(20).filter(fc_hz=fc_hz,desc = 'dec.f:20, fc:100').average(fr_Hz=fr_HZ).calc_spectrum(nperseg=NPERSEG/4)],
                title='Comparison of spectra for signals at WS=5 for inverter On \n decimated, filtered and finally averaged ',
                xlim =[1e0,3e2], ylim= [1e-7,6e-1],
                markersize=20,
                Kolmogorov_offset=1e-1,
                fname=None)
# %%

#+end_src

#+RESULTS:
:results:
: /usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 256 is greater than input length  = 35, using nperseg = 35
:   warnings.warn('nperseg = {0:d} is greater than input length '
: /usr/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2014: UserWarning: nperseg = 256 is greater than input length  = 35, using nperseg = 35
:   warnings.warn('nperseg = {0:d} is greater than input length '
[[file:./.ob-jupyter/73d1f929db8be1b423f053dac9696ac827cc7e86.png]]
[[file:./.ob-jupyter/3b2a419b8e2766b9a7771edb58d126b58251638b.png]]
[[file:./.ob-jupyter/67121e14fc739daa3900c620e236dfd67dfe82f6.png]]
:end:

*** plotting the comparison of butterworth filters 20, 200 and 2000 Hz :plot_comparative_response:

#+begin_src jupyter-python :session py  :async yes :results raw drawer

filter_Butter_20 = filt_butter_factory(filt_order =2, fc_hz = 20)
filter_Butter_200 = filt_butter_factory(filt_order = 2, fc_hz = 200)
filter_Butter_2000 = filt_butter_factory(filt_order = 2, fc_hz = 2000)


print(df_tdms_0_0.fs_hz)
# %% [markdown] ===========================================================================================================
# # Plots for Presentation
# Inverter is OFF
# different cut off frequencies.
#%%
FIGSIZE_SQR = (6,6)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_20,
        response_offset=2e-2,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR
        )
plt.savefig('_temp_fig/s3-PS-WS10-filt20')
#%%
plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR
        )
plt.savefig('_temp_fig/s3-PS-WS10-filt2000')

#%%
plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,6)
        )
plt.savefig('_temp_fig/s3-PS-WS10-filt200')

#+end_src

#+RESULTS:
:results:
: 500000.0000000014
[[file:./.ob-jupyter/6997b137a6a99babf1033516631af7c6284af394.png]]
[[file:./.ob-jupyter/a5493a36e7365a8c5869f7b7c378691b4e05963f.png]]
[[file:./.ob-jupyter/d65df0219b6f64c58d58dbfdd4232eb881617cfb.png]]
:end:

*** Demonstration of adverse effect with higher order filters :plot_comparative_response:

#+begin_src jupyter-python :session py  :async yes :results raw drawer
#%%[mardkowng]
# this is for showing the adverse effects of increasing the order usign a 6th order butteworth
#%%
FIGSIZE_SQR = (6,6)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func= filt_butter_factory(filt_order = 6, fc_hz = 200),
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,6)
        )
plt.savefig('_temp_fig/s3-PS-WS10-filt200_6')



# %% [markdown]
# ## Cut off frequency 200 Hz - Inverter is ON
plot_comparative_response(df_tdms_1_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,6)
        )
plt.savefig('_temp_fig/s3-PS-WS10_i1-filt200')

#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/f21a7ad3a9ffbb05fb6c54357857d2760bbb2634.png]]
[[file:./.ob-jupyter/dbd3fd800d8e6a717e41ebc5c86a1fb67591fce6.png]]
:end:

*** 200Hz cutoff frequencies with the inverter state OFF :plot_comparative_response:
This gives a pick on how the butterworth filter is effecting the output due to aliasing effects from the suppression.

#+begin_src jupyter-python :session py  :async yes :results raw drawer
# %% [markdown]
# ## Cut off frequency 200 Hz - Inverter is OFF
# TODO split this into another file
# # Effect of cut off frequency at different wind speeds
# This section is after the "optimal" frequency was selected to test whether there was a difference at different wind speeds

# %%
FIGSIZE_WIDE = (10,6)
plot_comparative_response(df_tdms_0_0, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=3e-6,
        Kolmogorov_offset = 1e-0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_WIDE,
        ylim=[1e-8,1e-2],
        plot_th=False)
plt.savefig(f'_temp_fig/s4-PS-WS00-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#%%
plot_comparative_response(df_tdms_0_5, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=3e-6,
        Kolmogorov_offset = 1e-0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_WIDE,
        ylim=[1e-8,1e-2],
        plot_th=False)
plt.savefig(f'_temp_fig/s4-PS-WS05-filt{filter_Butter_200.params.get("fc_hz")}')
        # ,facecolor='white', transparent=False)

# %%
plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=3e-6,
        Kolmogorov_offset = 1e-0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_WIDE,
        ylim=[1e-8,1e-2],
        plot_th=False)
plt.savefig(f'_temp_fig/s4-PS-WS10-filt{filter_Butter_200.params.get("fc_hz")}')
        # ,facecolor='white', transparent=False)
# %%
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/f5baf145affcd25239dbbbf76a02914f7fa5ba0d.png]]
[[file:./.ob-jupyter/264474be9c6048123be4f09f60f54850cc36b574.png]]
[[file:./.ob-jupyter/ef68a2c8000356faf21c98f596b4d7992f1e77d6.png]]
:end:

*** Inverter ON cutoff frequency 2000 Hz :plot_comparative_response:
#+begin_src jupyter-python :session py  :async yes :results raw drawer
# %%
# %% [markdown]
# ## Cut off frequency 2000 Hz - Inverter is OFF

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,8))
plt.savefig(f'_temp_fig/s2-PS-WS10-filt{filter_Butter_2000.params.get("fc_hz")}')

#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/c708863a698af58d9cd123afae143d784d0c2db9.png]]
:end:

*** Inverter state ON and various cutoff frequencies :plot_comparative_response:
#+begin_src jupyter-python :session py  :async yes :results raw drawer
# %% [markdown]  ==========================================================================================
# # Inverter is On
# ## Cut off frequency 20 Hz - Inverter is On
# %%
plot_comparative_response(df_tdms_1_10, # cutoff frequency
        filter_func=filter_Butter_20,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,8))
plt.savefig('_temp_fig/s2-PS-i1-WS10-filt20')
# %%
# ## Cut off frequency 200 Hz - Inverter is On
# %%
plot_comparative_response(df_tdms_1_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,8))
plt.savefig('_temp_fig/s2-PS-i1-WS10-filt200')

# %% [markdown]
# ## Cut off frequency 2000 Hz - Inverter is On
# %%
plot_comparative_response(df_tdms_1_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,8))
plt.savefig('_temp_fig/s2-PS-i1-WS10-filt2000')

#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/a560d2a939280296487570733497a271a28b60ea.png]]
[[file:./.ob-jupyter/8211de595d49489c94f4a02c8ac760e18289d62f.png]]
[[file:./.ob-jupyter/b3b59ae595c3244eba6b6ede7e3e9005cd10608d.png]]
:end:

*** 200 Hz cutoff frequency with Inverter ON and various WS (0, 5, 10 (m/s)) :plot_comparative_response:

+ here the basic idea is to find out how much is effecting the wind speed the filtering process
#+begin_src jupyter-python :session py  :async yes :results raw drawer
# %% [markdown] ===========================================================================================================
# TODO split this into another file
# # Effect of cut off frequency at different wind speeds
# This section is after the "optimal" frequency was selected
# to test whether there was a difference at different wind speeds


# %%
NPERSEG=1024
plot_comparative_response(df_tdms_1_0, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,8))
plt.savefig(f'_temp_fig/s4-PS-i1-WS00-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)

plot_comparative_response(df_tdms_1_5, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,8))
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)

#%%
plot_comparative_response(df_tdms_1_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =(12,8))
plt.savefig(f'_temp_fig/s4-PS-i1-WS10-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)



# %%
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/ae24cb2b96d13065be3b4248bd149e5c146b4f6d.png]]
[[file:./.ob-jupyter/4c65c5c2da646362510e36e5df8e707e6658655e.png]]
[[file:./.ob-jupyter/8211de595d49489c94f4a02c8ac760e18289d62f.png]]
:end:
** Recreate situations for FIR filter debugged from pypkg [60%] :debbuged:
*** DONE build a filter factory without hard coding sampling frequency by number [0%]
**** Imports
#+begin_src jupyter-python :session py :async yes :results raw drawer

from scipy import signal
import numpy as np

# filter_Butter_20 = filt_butter_factory(filt_order =2, fc_hz = 20)
# filter_Butter_200 = filt_butter_factory(filt_order = 2, fc_hz = 200)
# filter_Butter_2000 = filt_butter_factory(filt_order = 2, fc_hz = 2000)
# NPERSEG=1024<<8
# fc_hz=200
#+end_src

#+RESULTS:
:results:
:end:

**** BETTER CONSTRUCTOR [%]
:LOGBOOK:
CLOSED: [2023-02-16 Πεμ 08:21]
- CLOSING NOTE [2023-02-16 Πεμ 08:21] \\
  Εδώ καλο ειναι να μπορέσουμε να το βαλουμε μεσα στο πακετο. λογικα δουλευει ακριβως σαν την κλαση του παπαδακη. μπορει να χρησιμοποιηθει και με το function plot_comparative_response( ... ) για πιο ακριβη συγκριση του FIR με το IIR φιλτρο που επιθυμουμε!!!!
:END:
:REFERENCE:
+ Ripple image
  [[file:~/Screenshots/sos-tf-diff.png]]
  + image reference: [[https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfilt.html#scipy.signal.sosfilt][scipy.signal.sosfilt]]
+ Filtering functions(sos output type)
  - [[https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfilt.html#scipy.signal.sosfilt][signal.sosfilt]]
:END:
#+begin_src jupyter-python :session py :async yes :results raw drawer
# Define a class for FIR operations like
def fir_factory_constructor(fir_order=32, fc_fir_Hz:float=200):
    """#This is the new way should be working with Papadakis solution above."""

    def fir_filter(sig_r:np.ndarray,
                   fs_hz:float, fc_hz:float= fc_fir_Hz,
                   fir_filt_order=fir_order ):

        fir_filt_coeff= signal.firwin(numtaps=fir_filt_order,
                                      fs=fs_hz,
                                      cutoff=fc_hz ,
                                      # pass_zero=False ,
                                      # scale= True,
                                      )
        # # Hann approach
        # fir_filt_coeff=signal.firwin(fir_order + 1, [0, 200/fs_hz], fs=fs_hz , window='hann')

        # make output sos type to ensure normal operation
        # this is crusial for elimination of ending ripples see image above
        sos_fir_mode = signal.tf2sos(fir_filt_coeff, 1)
        sos_filt_data = signal.sosfilt(sos_fir_mode, sig_r-sig_r[0])+sig_r[0]
        warmup = fir_filt_order-1
        uncorrupted_output = sos_filt_data[warmup:]
        # filt_sig_time_int = time[warmup:]-((warmup/2)/fs_hz)
        return uncorrupted_output #uncorr_sos_output

    #Add the parameter attribute for checking filter response
    fir_filter.params = {'filter order':fir_order, 'fc_hz':fc_fir_Hz}
    return fir_filter

filter_fir_default=fir_factory_constructor(fir_order = 2, fc_fir_Hz= 100)

class Fir_filter:
    """# This class is used to take a signal as a tdms dataframe object (from pypkg funcs).
    """

    def __init__(self,signals) -> None:

        self.raw = signals.data
        #self.time_int = np.linspace(0, 7, len(self.raw))
        self.description = signals.description
        self._channel_data= signals._channel_data
        self.fs_hz = int (1/signals._channel_data.properties['wf_increment'])
        self.channel_name = signals._channel_data.name
        self.time_int = np.linspace(0, len (self.raw) / int(self.fs_hz), len(self.raw))

    def apply_fir(self, fc_hz, order_for_filter:int):
        filtered =fir_filter(self.raw, fs_hz=self.fs_hz, fc_hz=fc_hz)
        return pd.Series(filtered, name=f'{self.channel_name}:fir_filt_fc_{fc_hz}')

    # def output_time_dur(self, fc_hz):
    #     filtered, filt_time_int = fir_filter(self.raw,time=self.time_int, fs_hz=self.fs_hz, fc_hz=fc_hz)
    #     return filt_time_int

    # DEPENDS on a BUG (spect() function DO NOT USE!!)
    # def get_spect_fir_output(self, fc_hz, order_for_filter):
    #     x_filt, y_filt = spect(self.apply_fir(fc_hz=fc_hz, order_for_filter=108), FS= self.fs_hz)
    #     filt_type = 'FIR' return Graph_data_container(_x=x_filt, _y=y_filt,
    #                                                   label =  f'{self.description}-{self.channel_name} - filt: {filt_type}-{fc_hz}')
    #              BUG

    def _fir_filter(self, fc_hz:float=fir_fc_hz, filter_func=filter_fir_default, fs_hz=None )->pd.Series:
        """#TODO UPDATE DOCSTRING: return a filtered signal based on

        Args:
            fc_hz (float): cut off frequency in Hz
            filter_func (filt_fir_factory, optional): filtering function that thates two arguments (sig_r, fs_hz). Defaults to 100, filt_order = 2).
            fs_hz (None): sampling frequency in Hz (is None in declaration)


        Returns:
            _type_: _description_
        """
        if fs_hz is not None:
            logging.warning(f'issued {fs_hz} sampling frequency while the default is {self.fs_Hz}')
        fs_hz = fs_Hz if fs_Hz is not None else self.fs_Hz
        filtered = filter_func(sig_r=self.data, fs_hz=fs_Hz, fc_hz=fc_Hz )
        return pd.Series(filtered, name=f'{self.channel_name}:filt_fc_{fc_hz}')

    def fir_nested_filter(self,  fc_hz:float, filter_func=filter_fir_default, fs_hz=None, desc=None):
        sig_r_filt = self._fir_filter( fc_hz=fc_Hz, filter_func=filter_func, fs_hz=fs_Hz )
        description = desc if desc is not None else self.description + f"_fc:{fc_hz}"
        return WT_NoiseChannelProc.from_obj(self,
            desc = description,
            data = sig_r_filt.values,
            operation = f'pass filter {fc_hz}'
            )


# Function needed from WT_NoiseChannelProc objects to apply a butterworth
def apply_filter(sig_r:np.ndarray, fs_hz:float, fc_hz:float = 200, filt_order = 3 ):
                 # filter cutoff frequency
    sos = signal.butter(filt_order , fc_hz, 'lp', fs=fs_hz, output='sos')
    filtered = signal.sosfilt(sos, sig_r-sig_r[0])+sig_r[0]
    return filtered

#+end_src

#+RESULTS:
:results:
# [goto error]
#+begin_example
[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [19][0m, in [0;36m<cell line: 33>[0;34m()[0m
[1;32m     29[0m     [38;5;28;01mreturn[39;00m fir_filter
[1;32m     31[0m filter_fir_default[38;5;241m=[39mfir_factory_constructor(fir_order [38;5;241m=[39m [38;5;241m2[39m, fc_fir_Hz[38;5;241m=[39m [38;5;241m100[39m)
[0;32m---> 33[0m [38;5;28;01mclass[39;00m [38;5;21;01mFir_filter[39;00m:
[1;32m     34[0m [38;5;250m    [39m[38;5;124;03m"""# This class is used to take a signal as a tdms dataframe object (from pypkg funcs).[39;00m
[1;32m     35[0m [38;5;124;03m    """[39;00m
[1;32m     37[0m     [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m,signals) [38;5;241m-[39m[38;5;241m>[39m [38;5;28;01mNone[39;00m:

Input [0;32mIn [19][0m, in [0;36mFir_filter[0;34m()[0m
[1;32m     49[0m     [38;5;28;01mreturn[39;00m pd[38;5;241m.[39mSeries(filtered, name[38;5;241m=[39m[38;5;124mf[39m[38;5;124m'[39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39mchannel_name[38;5;132;01m}[39;00m[38;5;124m:fir_filt_fc_[39m[38;5;132;01m{[39;00mfc_hz[38;5;132;01m}[39;00m[38;5;124m'[39m)
[1;32m     51[0m [38;5;66;03m# def output_time_dur(self, fc_hz):[39;00m
[1;32m     52[0m [38;5;66;03m#     filtered, filt_time_int = fir_filter(self.raw,time=self.time_int, fs_hz=self.fs_hz, fc_hz=fc_hz)[39;00m
[1;32m     53[0m [38;5;66;03m#     return filt_time_int[39;00m
[0;32m   (...)[0m
[1;32m     59[0m [38;5;66;03m#                                                   label =  f'{self.description}-{self.channel_name} - filt: {filt_type}-{fc_hz}')[39;00m
[1;32m     60[0m [38;5;66;03m#              BUG[39;00m
[0;32m---> 62[0m [38;5;28;01mdef[39;00m [38;5;21m_fir_filter[39m([38;5;28mself[39m, fc_hz:[38;5;28mfloat[39m[38;5;241m=[39m[43mfir_fc_hz[49m, filter_func[38;5;241m=[39mfilter_fir_default, fs_hz[38;5;241m=[39m[38;5;28;01mNone[39;00m )[38;5;241m-[39m[38;5;241m>[39mpd[38;5;241m.[39mSeries:
[1;32m     63[0m [38;5;250m    [39m[38;5;124;03m"""#TODO UPDATE DOCSTRING: return a filtered signal based on[39;00m
[1;32m     64[0m
[1;32m     65[0m [38;5;124;03m    Args:[39;00m
[0;32m   (...)[0m
[1;32m     72[0m [38;5;124;03m        _type_: _description_[39;00m
[1;32m     73[0m [38;5;124;03m    """[39;00m
[1;32m     74[0m     [38;5;28;01mif[39;00m fs_hz [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

[0;31mNameError[0m: name 'fir_fc_hz' is not defined
#+end_example
:end:
***** TODO de #BUG
**** comparing raw and filtered signals with FIR :IIR_FIR_COMPARISON:
+ plot the fir filter response numtaps as above to double check
#+begin_src jupyter-python :session py :async yes :results raw drawer

fir_fc_hz=200
fir_or=65

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_1_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          # xlim=0e0,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_1_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)

#+end_src
*** DONE compare wind speeds with constant cutoff freq [100%] :new_filtering_method:

**** DONE inv 0 ws 0 fc=200Hz

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=200
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_0, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_0, # cutoff frequency
                          filter_func=filter_Butter_200,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100
                          ,figsize =FIGSIZE_SQR_L)
plt.savefig(
    f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',
    facecolor='white',
    transparent=False)
#+end_src
**** DONE inv 0 ws 5 fc=200Hz

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=200
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_5, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_5, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/2838a4f7b626ce0172ef7630b10e8e824c215531.png]]
[[file:./.ob-jupyter/4a3bd54c26c00fdf5e48969781862c61f146af1d.png]]
:end:

#+begin_src jupyter-python :session none :async yes
# dummy
#+end_src
**** DONE inv 0 ws 10 fc=200Hz

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=200
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/d2964500b41eb687102652cdda3246914d11f0dc.png]]
[[file:./.ob-jupyter/e24508d26a6734474745f769a7e1d636a113b01a.png]]
:end:
*** DONE play with sustain (slope of cutting edge) [100%]
:LOGBOOK:
CLOSED: [2023-02-16 Πεμ 12:53]

- CLOSING NOTE [2023-02-16 Πεμ 12:53] \\
  the optimal is the last slope.
  BEST approach with feedback checking with butterworth by Papadaki.
:END:

**** DONE [MAX SLOPE] inv 0 ws 10 [m/s] fc=100 [Hz]
:LOGBOOK:
- CLOSING NOTE [2023-02-16 Πεμ 11:15] \\
  this is perfect to give extreme examples of filters
  overfiltering !!
  IIR order = 20
  FIR order = 104
:END:

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=100
fir_or=104


fir_filter_cnstr_xslope=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
butter_filter_cnstr_xslope=filt_butter_factory(filt_order = 20, fc_hz = 100)
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=butter_filter_cnstr_xslope,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/4417b8445ec30410a38c55fa96f0f1378c5e5baf.png]]
[[file:./.ob-jupyter/df557fa1aa1fb79f4c2890d6a72a3c9f2a03b35d.png]]
:end:
**** DONE [MID SLOPE] inv 1 ws 10 [m/s] fc=2_000 [Hz]
:LOGBOOK:
- CLOSING NOTE [2023-02-16 Πεμ 12:41] \\
  ready and tested!
  make also some tweaks here for titles and stuff!
:END:

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=2000
fir_or=24

fir_filter_cnstr_xorder = fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
butter_filter_cnstr_xslope = filt_butter_factory(filt_order=4, fc_hz=2_000)
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_1_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_1_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/c0b2f0da545f532045c51e5b1c6d41351340cae6.png]]
[[file:./.ob-jupyter/4d3977202a40028566533b4c054d85ec425452d2.png]]
:end:
**** DONE [OPTIMAL SLOPE] inv 1 ws 10 [m/s] fc=2_000 [Hz]
:LOGBOOK:
- CLOSING NOTE [2023-02-16 Πεμ 12:49] \\
  done and tested with comparative_response function.
:END:

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=2000
fir_or=8

butter_filter_cnstr_xslope = filt_butter_factory(filt_order=8, fc_hz=2_000)
fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/1b2b7d412fd660ab07b5ae81abce720a499b0e36.png]]
[[file:./.ob-jupyter/d0f54ab657c9188148280a5d41ff6308d2e44114.png]]
:end:
*** TODO compare different cutoff frequencies [66%] :new_filtering_method:
**** DONE inv 0 ws 10 fc=2000 [Hz]

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=2000
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/270d290a6370797e684bd3ef1345b7dc8fb561b6.png]]
[[file:./.ob-jupyter/d0f54ab657c9188148280a5d41ff6308d2e44114.png]]
:end:
**** DONE inv 0 ws 10 fc=20Hz
#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=20
fir_or=34

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_20,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/12571988aca2eb6d8197af26230b3fde5d500d9c.png]]
[[file:./.ob-jupyter/1764232c1484c9f1b69a3b22ea6ff4164c093805.png]]
:end:

#+begin_src jupyter-python :session none :async yes
# dummy
#+end_src
**** TODO inv 0 ws 10 fc=X Hz


#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=85
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_200,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src

#+RESULTS:
:results:
: /usr/lib/python3.10/site-packages/pros_noisefiltering-0.0.4-py3.10.egg/pros_noisefiltering/WT_NoiProc.py:315: UserWarning: Data has no positive values, and therefore cannot be log-scaled.
[[file:./.ob-jupyter/cdc95148e7678aef381566121ca37a21e30a894c.png]]
[[file:./.ob-jupyter/e24508d26a6734474745f769a7e1d636a113b01a.png]]
:end:

#+begin_src jupyter-python :session none :async yes
# dummy
#+end_src
*** TODO play with filter gain levels [0%]
**** TODO inv 0 ws 10 fc=2000 [Hz]

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=2000
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src
**** TODO inv 0 ws 10 fc=2000 [Hz]

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=2000
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src
**** TODO inv 0 ws 10 fc=2000 [Hz]

#+begin_src jupyter-python :session py :async yes :results drawer
fir_fc_hz=2000
fir_or=104

fir_filter_cnstr_xorder=fir_factory_constructor(fir_order=fir_or, fc_fir_Hz=fir_fc_hz )
FIGSIZE_SQR_L = (8,10)
plot_comparative_response(df_tdms_0_10, # cutoff frequency
                          filter_func=fir_filter_cnstr_xorder ,
                          response_offset=2e-4,
                          Kolmogorov_offset = 4e0,
                          nperseg=NPERSEG*100,
                          figsize =FIGSIZE_SQR_L)

plot_comparative_response(df_tdms_0_10, # cutoff frequency
        filter_func=filter_Butter_2000,
        response_offset=2e-4,
        Kolmogorov_offset = 4e0,
        nperseg=NPERSEG*100
        ,figsize =FIGSIZE_SQR_L)
plt.savefig(f'_temp_fig/s4-PS-i1-WS05-filt{filter_Butter_200.params.get("fc_hz")}',facecolor='white', transparent=False)
#+end_src
* TODO [#A] migrate to polars (eliminate indexes)
** make a link to the pypkg
* [#A] WHAT IS LOADED TO JUPYTER KERNEL
#+begin_src jupyter-python :session py :async yes :results raw drawer
%whos
#+end_src

#+RESULTS:
:results:
#+begin_example
Variable                     Type                   Data/Info
-------------------------------------------------------------
Axis_titles                  type                   <class 'pros_noisefilteri<...>n_functions.Axis_titles'>
CHAN_NAME                    str                    Wind2
FFT_new                      type                   <class '__main__.FFT_new'>
FIGSIZE_SQR                  tuple                  n=2
FIGSIZE_SQR_L                tuple                  n=2
FIGSIZE_STD                  tuple                  n=2
FIGSIZE_WIDE                 tuple                  n=2
FOLDER_FOR_DATA              PosixPath              /home/dtos_experiment/Doc<...>2/new_record_prop_channel
Fft_Plot_info                type                   <class 'pros_noisefilteri<...>functions.Fft_Plot_info'>
Fir_filter                   type                   <class '__main__.Fir_filter'>
GROUP_NAME                   str                    Wind Measurement
Graph_data_container         type                   <class 'pros_noisefilteri<...>er.Graph_data_container'>
NPERSEG                      int                    1024
Path                         type                   <class 'pathlib.Path'>
Signals_for_fft_plot         type                   <class 'pros_noisefilteri<...>ns.Signals_for_fft_plot'>
TDMS_FNAME                   str                    Data.tdms
TdmsFile                     type                   <class 'nptdms.tdms.TdmsFile'>
WT_NoiseChannelProc          type                   <class 'pros_noisefilteri<...>roc.WT_NoiseChannelProc'>
a                            ndarray                2650000: 2650000 elems, type `int64`, 21200000 bytes (20.2178955078125 Mb)
apply_filter                 function               <function apply_filter at 0x7fc810c4ef80>
butter_filter_cnstr_xslope   function               <function filt_butter_fac<...>butter at 0x7fc810c6fbe0>
comp_air_dir                 str                    compressed air
data_CA_inv_0_WS_0           str                    ca0_0.1
data_CA_inv_0_WS_11          str                    ca0_10.1
data_CA_inv_0_WS_5           str                    ca0_5.1
data_CA_inv_1_WS_0           str                    ca1_0.1
data_CA_inv_1_WS_10          str                    ca1_10.1
data_CA_inv_1_WS_5           str                    ca1_5.1
data_inv_inv_0_WS_0          str                    in0_0.1
data_inv_inv_1_WS10          str                    in1_10.1
data_inv_inv_1_WS15          str                    in1_15.1
data_inv_inv_1_WS_0          str                    in1_0.1
data_inv_inv_1_WS_20         str                    in1_20.1
data_inv_inv_1_WS_5          str                    in1_5.1
df_tdms_0_0                  WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc8276d6d10>
df_tdms_0_10                 WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc8276d75e0>
df_tdms_0_5                  WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc8276d7520>
df_tdms_1_0                  WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc8276d6bf0>
df_tdms_1_10                 WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc8276d6b30>
df_tdms_1_5                  WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc8276d6ce0>
dfi_i0_w0                    WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc82753c8e0>
dfi_i1_w0                    WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc82753c820>
dfi_i1_w10                   WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc82753e8c0>
dfi_i1_w15                   WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc827736da0>
dfi_i1_w20                   WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc827736680>
dfi_i1_w5                    WT_NoiseChannelProc    <pros_noisefiltering.WT_N<...>object at 0x7fc82753c550>
fc_hz                        int                    10
fft                          function               <function fft at 0x7fc85c0a4d30>
fft_calc_sig                 type                   <class 'pros_noisefilteri<...>_functions.fft_calc_sig'>
fft_sig                      function               <function fft_sig at 0x7fc82771c700>
filt_butter_factory          function               <function filt_butter_factory at 0x7fc82771cc10>
filter_Butter_20             function               <function filt_butter_fac<...>butter at 0x7fc81082f490>
filter_Butter_200            function               <function filt_butter_fac<...>butter at 0x7fc81082fac0>
filter_Butter_2000           function               <function filt_butter_fac<...>butter at 0x7fc81082feb0>
filter_fir_default           function               <function fir_factory_con<...>filter at 0x7fc81082fc70>
fir_factory_constructor      function               <function fir_factory_con<...>ructor at 0x7fc810c4ecb0>
fir_fc_hz                    int                    100
fir_filter_cnstr_xorder      function               <function fir_factory_con<...>filter at 0x7fc8109723b0>
fir_filter_cnstr_xslope      function               <function fir_factory_con<...>filter at 0x7fc810c6d000>
fir_or                       int                    65
fr_HZ                        int                    100
ifft                         function               <function ifft at 0x7fc85c0a4e50>
inv_meas_dir                 str                    inverter
item                         str                    in1_20.1
l_tdms_CA                    list                   n=6
l_tdms_Inv                   list                   n=6
np                           module                 <module 'numpy' from '/us<...>kages/numpy/__init__.py'>
nptdms                       module                 <module 'nptdms' from '/u<...>ages/nptdms/__init__.py'>
path_comp                    PosixPath              /home/dtos_experiment/Doc<...>ord_prop_channel/inverter
pd                           module                 <module 'pandas' from '/u<...>ages/pandas/__init__.py'>
plot_FFT                     function               <function plot_FFT at 0x7fc82771c8b0>
plot_comparative_response    function               <function plot_comparativ<...>sponse at 0x7fc82771cdc0>
plot_spect_comb2             function               <function plot_spect_comb2 at 0x7fc82771c280>
plt                          module                 <module 'matplotlib.pyplo<...>es/matplotlib/pyplot.py'>
pnf                          module                 <module 'pros_noisefilter<...>sefiltering/__init__.py'>
raw_signal_CA                list                   n=6
signal                       module                 <module 'scipy.signal' fr<...>cipy/signal/__init__.py'>
spect                        function               <function spect at 0x7fc82771c0d0>
x                            FFT_new                <__main__.FFT_new object at 0x7fc810d17a60>
#+end_example
:end:
* refile_stuff :noexport:
** junk
#+begin_src jupyter-python :session py :async yes
print(df_tdms_0_0.fs_hz)
print(fc_hz)
print(np.std(df_tdms_0_0.data_as_Series))
print(np.std(df_tdms_0_0.filter(fc_hz=2_000, filter_func=apply_filter).data_as_Series))
print(np.std(Fir_filter(df_tdms_0_0).apply_fir(fc_hz=2000, order_for_filter=65)))

print(fc_hz)

#+end_src

#+RESULTS:
:RESULTS:
: 500000.0000000014
: 10
: 0.006195530830989477
: 0.00153298627789367
# [goto error]
#+begin_example
[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [50][0m, in [0;36m<cell line: 5>[0;34m()[0m
[1;32m      3[0m [38;5;28mprint[39m(np[38;5;241m.[39mstd(df_tdms_0_0[38;5;241m.[39mdata_as_Series))
[1;32m      4[0m [38;5;28mprint[39m(np[38;5;241m.[39mstd(df_tdms_0_0[38;5;241m.[39mfilter(fc_hz[38;5;241m=[39m[38;5;241m2_000[39m, filter_func[38;5;241m=[39mapply_filter)[38;5;241m.[39mdata_as_Series))
[0;32m----> 5[0m [38;5;28mprint[39m(np[38;5;241m.[39mstd([43mFir_filter[49m[43m([49m[43mdf_tdms_0_0[49m[43m)[49m[38;5;241;43m.[39;49m[43mapply_fir[49m[43m([49m[43mfc_hz[49m[38;5;241;43m=[39;49m[38;5;241;43m2000[39;49m[43m,[49m[43m [49m[43morder_for_filter[49m[38;5;241;43m=[39;49m[38;5;241;43m65[39;49m[43m)[49m))
[1;32m      7[0m [38;5;28mprint[39m(fc_hz)

Input [0;32mIn [42][0m, in [0;36mFir_filter.apply_fir[0;34m(self, fc_hz, order_for_filter)[0m
[1;32m     47[0m [38;5;28;01mdef[39;00m [38;5;21mapply_fir[39m([38;5;28mself[39m, fc_hz, order_for_filter:[38;5;28mint[39m):
[0;32m---> 48[0m     filtered [38;5;241m=[39m[43mfir_filter[49m([38;5;28mself[39m[38;5;241m.[39mraw, fs_hz[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mfs_hz, fc_hz[38;5;241m=[39mfc_hz)
[1;32m     49[0m     [38;5;28;01mreturn[39;00m pd[38;5;241m.[39mSeries(filtered, name[38;5;241m=[39m[38;5;124mf[39m[38;5;124m'[39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39mchannel_name[38;5;132;01m}[39;00m[38;5;124m:fir_filt_fc_[39m[38;5;132;01m{[39;00mfc_hz[38;5;132;01m}[39;00m[38;5;124m'[39m)

[0;31mNameError[0m: name 'fir_filter' is not defined
#+end_example
:END:
*** DONE testing the new filter method with signal inverter ON and WS 5 :IIR_FIR_COMPARISON:
CLOSED: [2023-02-16 Πεμ 08:23]
:LOGBOOK:
- CLOSING NOTE [2023-02-16 Πεμ 08:23] \\
  test passes nearly identical Standard deviation
:END:


#+RESULTS:
:RESULTS:
: fs =        500000.0000000014
: fc/fir =    200
: order/fir = 104
: stnd dev raw-sig 0.08411345523411061
: stnd dev butterw 0.07590339469023784
: stnd dev fir-out 0.0759598237693874
[[file:./.ob-jupyter/b25397acd28385a081903b24833765b9667c1605.png]]
:END:
** testing standard deviation for FIR filtered signal in datasets

#+begin_src jupyter-python :session py :async yes :results raw drawer

# Inverter state 0
print(f'The standard deviation for the CA set is : \n {np.std(df_tdms_0_0.data)}')

print(f'The standard deviation for the Inverter`s set is : \n {np.std(dfi_i0_w0.data)}')

# Inverter state 1
print(f'The standard deviation for the CA set is [ON] : \n {np.std(df_tdms_1_0.data)}')

print(f'The standard deviation for the Inverter`s set is [ON] : \n {np.std(dfi_i1_w0.data)}')

# Inverter state 1 WS 5
print(f'The standard deviation for the CA set is [ON [WS:5]] : \n {np.std(df_tdms_1_5.data)}')

print(f'The standard deviation for the Inverter`s set is [ON[WS:5]] : \n {np.std(dfi_i1_w5.data)}')

# Inverter state 1 WS 10
print(f'The standard deviation for the CA set is [ON [WS:10]] : \n {np.std(df_tdms_1_10.data)}')

print(f'The standard deviation for the Inverter`s set is [ON[WS:10]] : \n {np.std(dfi_i1_w10.data)}')
#+end_src

#+RESULTS:
:results:
#+begin_example
The standard deviation for the CA set is :
 0.006195530830990014
The standard deviation for the Inverter`s set is :
 0.007631000516108838
The standard deviation for the CA set is [ON] :
 0.03640710377731642
The standard deviation for the Inverter`s set is [ON] :
 0.039231610005325684
The standard deviation for the CA set is [ON [WS:5]] :
 0.043360563542830126
The standard deviation for the Inverter`s set is [ON[WS:5]] :
 0.038539116482425785
The standard deviation for the CA set is [ON [WS:10]] :
 0.08411345523399606
The standard deviation for the Inverter`s set is [ON[WS:10]] :
 0.04000171217337094
#+end_example
:end:
** DONE OLD Constructor :noexport:
CLOSED: [2023-02-16 Πεμ 08:18]
:LOGBOOK:
- CLOSING NOTE [2023-02-16 Πεμ 08:18] \\
  this is obsolete and has hardcoded numbers!! Bad practice!
:END:
#+begin_src jupyter-python :session none :async yes :results raw drawer
def filt_fir_factory( numtaps_2: int, fc_hz:float):
    """
This is a factory method that produces a FIR filter function
    with a filter order and a cutoff frequency

    Args:
        filt_order (int, optional)  : Filter order. Defaults to 2.
        fc_hz (float, optional)     : cut off frequency in Hz (defaults to 100)
    """
    def filt_fir(sig_r:np.ndarray, fs_hz:float, fc_hz:float= fc_Hz, numtaps = numtaps_2):
        """# FIR low-pass filter constructor.

        Here the filter is a simple LP FIR filter with the window
        method of /scipy.signal.firwin()/ function for a relatively
        stable output.

        Parameters:
        ===========
        numtaps_2 : int
            The order of the filter to be produced.

        FS : float
            The sampling frequency of the samples.

        cutoff_Hz : float
            cutoff freq in Hz.

        Returns:
        ========
        Filt : list
            A list of arrays containing the filtered signal
            with no delay (time delay of FIR filter: time_delay = 1/2(numtaps-1))

        Blank : list
            A list of arrays containing the filtered signal
            with time delay from FIR filter process.

        TIME : np.ndarray
            The `time interval` from the dataframe

        Usage example:
        ==============
        >>>filter_coeff, w, h = fir.lp_firwin
        >>>            (numtaps_2=20, FS=FS, cutoff_Hz=0.0001)
        >>>
        """
        fir_co = signal.firwin(numtaps_2, cutoff_Hz)
        w_fir_co, h_fir_co = signal.freqz(fir_co, [1])
        return fir_co, w_fir_co, h_fir_co
    # additional decoration sith params dictionary
    # this is used instead of a class
    filt_fir.params = {'numtaps':numtaps_2, 'fc_hz':fc_Hz}
    return filt_fir
filter_fir_default=filt_fir_factory(numtaps_2=2, fc_hz=200)


#+end_src

#+RESULTS:
:results:
:end:
* buttons :noexport:
# <(go to notes)>
# <(go to document)>
